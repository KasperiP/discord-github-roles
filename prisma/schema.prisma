// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma_client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  gitHubAccount  GitHubAccount?
  discordAccount DiscordAccount?
}

model GitHubAccount {
  id          String   @id @default(cuid())
  githubId    String   @unique
  username    String
  connectedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to User (one-to-one)
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DiscordAccount {
  id          String   @id @default(cuid())
  discordId   String   @unique
  username    String
  connectedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to User (one-to-one)
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GuildConfig {
  id                String               @id @default(cuid())
  guildId           String               @unique
  contributorRoleId String?
  stargazerRoleId   String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  repositories      FollowedRepository[]
  syncHistory       GuildSyncHistory[]
}

model FollowedRepository {
  id        String   @id @default(cuid())
  owner     String // Repository owner (username or organization)
  name      String // Repository name
  createdAt DateTime @default(now())

  // Relation to GuildConfig
  guildConfigId String
  guildConfig   GuildConfig @relation(fields: [guildConfigId], references: [id], onDelete: Cascade)

  // Composite unique constraint to prevent duplicates per guild
  @@unique([guildConfigId, owner, name])
}

// Models for tracking sync history
model GuildSyncHistory {
  id             String      @id @default(cuid())
  guildConfigId  String
  guildConfig    GuildConfig @relation(fields: [guildConfigId], references: [id], onDelete: Cascade)
  startedAt      DateTime    @default(now())
  completedAt    DateTime?
  success        Boolean     @default(false)
  errorMessage   String?
  totalProcessed Int         @default(0)
  rolesAdded     Int         @default(0)
  rolesRemoved   Int         @default(0)
}
